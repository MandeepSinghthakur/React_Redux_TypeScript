{"version":3,"sources":["state/action-types/index.ts","state/reducers/desertsReducer.ts","state/reducers/index.ts","state/store.ts","state/middlewares/persist-middlware.ts","state/action-creators/index.ts","hooks/use-typed-selector.ts","components/read-more.tsx","components/desserts-list.tsx","hooks/use-actions.ts","index.tsx"],"names":["ActionType","initialState","loading","error","data","firstItem","reducer","produce","state","action","type","FETCH_DESSERTS","FETCH_DESSERTS_COMPLETE","payload","slice","FETCH_DESSERTS_ERROR","ADD_DESSERT","ADD_DESSERT_COMPLETE","ADD_DESSERT_ERROR","reducers","combineReducers","desserts","desertsReducer","store","createStore","applyMiddleware","dispatch","getState","next","thunk","fetchDesserts","a","fetch","response","json","message","addDessert","newData","err","useTypedSelector","useSelector","ReadMore","text","children","useState","isReadMore","setIsReadMore","className","onClick","DessertsList","dessert","setDessert","dessertList","setDessertList","show","setShow","inputName","setInputName","inputPrice","setInputPrice","inputImage","setInputImage","inputDescription","setInputDescription","useDispatch","useMemo","bindActionCreators","actionCreators","useActions","useEffect","handleClose","src","imageUrl","price","name","description","map","item","i","alt","Button","variant","Modal","onHide","Header","closeButton","Title","Body","Form","Group","controlId","Label","Control","value","onChange","e","target","placeholder","Footer","alert","Number","App","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.4c913d71.chunk.js","sourcesContent":["export enum ActionType {\n  FETCH_DESSERTS = 'fetch_desserts',\n  FETCH_DESSERTS_COMPLETE = 'fetch_desserts_complete',\n  FETCH_DESSERTS_ERROR = 'fetch_desserts_error',\n  ADD_DESSERT ='add_dessert',\n  ADD_DESSERT_COMPLETE = 'add_dessert_complete',\n  ADD_DESSERT_ERROR ='add_dessert_error'\n}\n","import produce from 'immer';\nimport { ActionType } from '../action-types';\nimport { Action } from '../actions';\nimport { Dessert } from '../dessert';\n\ninterface DessertsState {\n  loading: boolean;\n  error: string | null;\n  data: Dessert[];\n  firstItem: Dessert | null\n}\n\nconst initialState: DessertsState = {\n  loading: false,\n  error: null,\n  data: [],\n  firstItem:null\n};\n\nconst reducer = produce((state: DessertsState = initialState, action: Action) => {\n  switch (action.type) {\n    case ActionType.FETCH_DESSERTS:\n      state.loading = true;\n      state.error = null;\n      return state;\n    case ActionType.FETCH_DESSERTS_COMPLETE:\n      state.data = action.payload.slice(1)\n      state.firstItem = action.payload[0]\n      return state;\n    case ActionType.FETCH_DESSERTS_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n    case ActionType.ADD_DESSERT:\n      state.loading = true;\n      state.error = null;\n      return state;\n    case ActionType.ADD_DESSERT_COMPLETE:\n      state.data = [...state.data,action.payload]\n      return state;\n    case ActionType.ADD_DESSERT_ERROR:\n      state.loading = false;\n      state.error = action.payload;\n      return state;\n    default:\n      return state;\n  }\n});\n\nexport default reducer;\n","import { combineReducers } from 'redux';\nimport  desertsReducer from './desertsReducer';\n\nconst reducers = combineReducers({\n  desserts: desertsReducer\n});\n\nexport default reducers;\n\nexport type RootState = ReturnType<typeof reducers>;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport reducers from './reducers';\nimport { persistMiddlware } from './middlewares/persist-middlware';\n\nexport const store = createStore(\n  reducers,\n  {},\n  applyMiddleware(persistMiddlware, thunk)\n);\n","import { Dispatch } from 'redux';\nimport { Action } from '../actions';\nimport { RootState } from '../reducers';\n\nexport const persistMiddlware = ({\n  dispatch,\n  getState,\n}: {\n  dispatch: Dispatch<Action>;\n  getState: () => RootState;\n}) => {\n  return (next: (action: Action) => void) => {\n    return (action: Action) => {\n      next(action);\n    };\n  };\n};\n","import { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\nimport {\n  Action\n} from '../actions';\nimport { Dessert } from '../dessert';\n\nexport const fetchDesserts = () => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.FETCH_DESSERTS });\n    try {\n      const response = await fetch('desserts.json');\n      const data: Dessert[] = await  response.json()\n      dispatch({\n        type: ActionType.FETCH_DESSERTS_COMPLETE,\n        payload: data,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.FETCH_DESSERTS_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n\nexport const addDessert = (newData:Dessert) => {\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({ type: ActionType.ADD_DESSERT, });\n    try {\n      // TO DO SAVE IT TO DB INSTEAD OF RETURNING IT\n      dispatch({\n        type: ActionType.ADD_DESSERT_COMPLETE,\n        payload: newData,\n      });\n    } catch (err) {\n      dispatch({\n        type: ActionType.ADD_DESSERT_ERROR,\n        payload: err.message,\n      });\n    }\n  };\n};\n","import { useSelector, TypedUseSelectorHook } from 'react-redux';\nimport { RootState } from '../state';\n\nexport const useTypedSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import { useState } from 'react';\nimport './read-more.css'\n// @ts-ignore\nconst ReadMore: React.FC = ({ children  }) => {\n  const text = children || '';\n  const [isReadMore, setIsReadMore] = useState(true);\n  const toggleReadMore = () => {\n    setIsReadMore(!isReadMore);\n  };\n  return (\n    <p className=\"text\">\n      {/*@ts-ignore*/}\n      {isReadMore ? text.slice(0, 10) : text}\n      <span onClick={toggleReadMore} className=\"read-or-hide\">\n        {isReadMore ? \"...read more\" : \" show less\"}\n      </span>\n    </p>\n  );\n};\nexport default ReadMore","\nimport { Fragment, useEffect, useState } from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { useActions } from '../hooks/use-actions';\nimport { Dessert } from '../state/dessert';\nimport ReadMore from './read-more';\nimport './dessert.css'\n\n\nconst DessertsList: React.FC = () => {\n  const desserts: Dessert[] = useTypedSelector(({ desserts: { data } }) =>\n    data\n  );\n  const firstItem: Dessert | null = useTypedSelector(({ desserts: { firstItem } }) =>\n    firstItem\n  );\n  const [dessert, setDessert] = useState<Dessert | null>()\n  const [dessertList, setDessertList] = useState<Dessert[]>([])\n  const [show, setShow] = useState(false);\n  const [inputName, setInputName] = useState('')\n  const [inputPrice, setInputPrice] = useState('')\n  const [inputImage, setInputImage] = useState('')\n  const [inputDescription, setInputDescription] = useState('')\n\n  const { fetchDesserts, addDessert } = useActions();\n \n  useEffect(() => {\n    fetchDesserts();\n  }, [fetchDesserts]);\n  useEffect(() => {\n    setDessert(firstItem)\n    setDessertList(desserts)\n  }, [desserts, firstItem])\n\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const handleAdd = () => {\n    if (inputName === '' || inputPrice === '' || inputImage === '' || inputDescription === '') {\n      alert(\"Please Enter all the value\")\n    } else {\n      addDessert({\n        name: inputName,\n        price: Number(inputPrice),\n        imageUrl: inputImage,\n        description: inputDescription\n      })\n    }\n    setShow(false);\n    setInputName('')\n    setInputPrice('')\n    setInputImage('')\n    setInputDescription('')\n  }\n\n  return (\n    <>\n      <div className=\"container container-custom\">\n        {dessert &&\n          <>\n            <img className=\"top_image\" src={dessert.imageUrl}></img>\n            <div className=\"bottom-left\">\n              <div className=\"price\">${dessert.price}</div>\n              <div className=\"name\">{dessert.name}</div>\n              <div className=\"read_more\"><ReadMore>{dessert.description}</ReadMore></div>\n            </div>\n          </>\n        }\n      </div>\n      <div className=\"container grid-container container-custom\">\n        <div className=\"row\">\n          {dessertList.map(function (item, i) {\n            return <Fragment key={i}>\n              <div className=\"col-12 col-md-6 col-lg-4\" key={i}>\n                <div className=\"card\">\n                  <img className=\"card-img-top\" src={item.imageUrl} alt=\"Card image cap\" />\n                  <div className=\"card-body\">\n                    <div className=\"info_container\">\n                      <h5 className=\"card-title price\">$ {item.price}</h5>\n                      <h5 className=\"card-title name\">{item.name}</h5>\n                    </div>\n                    <div className=\"card-text\"> <ReadMore>{item.description}</ReadMore></div>\n                  </div>\n                </div>\n              </div>\n            </Fragment>\n          })}\n        </div>\n      </div>\n      <div className=\"container container-custom\">\n        <Button variant=\"primary\" onClick={handleShow}>\n          Add Desert\n        </Button>\n      </div>\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add Desert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n              <Form.Label>Desert Name</Form.Label>\n              <Form.Control value={inputName} onChange={e => setInputName(e.target.value)} type=\"text\" placeholder=\"Enter Dessert Name\" />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPrice\">\n              <Form.Label>Price</Form.Label>\n              <Form.Control value={inputPrice} onChange={e => setInputPrice(e.target.value)} type=\"text\" placeholder=\"Price\" />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicImage\">\n              <Form.Label>Image Url</Form.Label>\n              <Form.Control value={inputImage} onChange={e => setInputImage(e.target.value)} type=\"text\" placeholder=\"Enter ImageUrl\" />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicDescription\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control value={inputDescription} onChange={e => setInputDescription(e.target.value)} type=\"text\" placeholder=\"Enter Descriptiojn\" />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleAdd}>\n            Add Dessert\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default DessertsList;\n","import { useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { actionCreators } from '../state';\n\nexport const useActions = () => {\n  const dispatch = useDispatch();\n\n  return useMemo(() => {\n    return bindActionCreators(actionCreators, dispatch);\n  }, [dispatch]);\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './state';\nimport DessertsList from './components/desserts-list';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div>\n        <DessertsList />\n      </div>\n    </Provider>\n  );\n};\n\nReactDOM.render(<App />, document.querySelector('#root'));\n"],"sourceRoot":""}