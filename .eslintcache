[{"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/index.tsx":"1","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/components/desserts-list.tsx":"2","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/index.ts":"3","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/hooks/use-actions.ts":"4","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/hooks/use-typed-selector.ts":"5","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/store.ts":"6","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/reducers/index.ts":"7","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/action-creators/index.ts":"8","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/middlewares/persist-middlware.ts":"9","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/reducers/desertsReducer.ts":"10","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/action-types/index.ts":"11","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/dessert.ts":"12","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/components/read-more.tsx":"13"},{"size":357,"mtime":1629647600395,"results":"14","hashOfConfig":"15"},{"size":5483,"mtime":1629666622281,"results":"16","hashOfConfig":"15"},{"size":133,"mtime":1629648006875,"results":"17","hashOfConfig":"15"},{"size":336,"mtime":1610739010000,"results":"18","hashOfConfig":"15"},{"size":182,"mtime":1610468471000,"results":"19","hashOfConfig":"15"},{"size":289,"mtime":1611611620000,"results":"20","hashOfConfig":"15"},{"size":236,"mtime":1629647819692,"results":"21","hashOfConfig":"15"},{"size":1124,"mtime":1629666471793,"results":"22","hashOfConfig":"15"},{"size":359,"mtime":1629649504699,"results":"23","hashOfConfig":"15"},{"size":1318,"mtime":1629666547602,"results":"24","hashOfConfig":"15"},{"size":288,"mtime":1629646477362,"results":"25","hashOfConfig":"15"},{"size":104,"mtime":1629650536679,"results":"26","hashOfConfig":"15"},{"size":551,"mtime":1629665835503,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"r3cbke",{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/index.tsx",[],["56","57"],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/components/desserts-list.tsx",["58","59","60"],"\nimport { Fragment, useEffect, useState } from 'react';\nimport Modal from 'react-bootstrap/Modal'\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner'\nimport Form from 'react-bootstrap/Form'\nimport { useTypedSelector } from '../hooks/use-typed-selector';\nimport { useActions } from '../hooks/use-actions';\nimport { Dessert } from '../state/dessert';\nimport ReadMore from './read-more';\nimport './dessert.css'\n\n\nconst DessertsList: React.FC = () => {\n  const loading: Boolean = useTypedSelector(({ desserts: { loading } }) =>\n  loading\n);\n  const desserts: Dessert[] = useTypedSelector(({ desserts: { data } }) =>\n    data\n  );\n  const firstItem: Dessert | null = useTypedSelector(({ desserts: { firstItem } }) =>\n    firstItem\n  );\n  const [dessert, setDessert] = useState<Dessert | null>()\n  const [dessertList, setDessertList] = useState<Dessert[]>([])\n  const [show, setShow] = useState(false);\n  const [inputName, setInputName] = useState('')\n  const [inputPrice, setInputPrice] = useState('')\n  const [inputImage, setInputImage] = useState('')\n  const [inputDescription, setInputDescription] = useState('')\n\n  const { fetchDesserts, addDessert } = useActions();\n \n  useEffect(() => {\n    setDessert(firstItem)\n    setDessertList(desserts)\n  }, [desserts, firstItem]) \n\n  const getDesserts = () => {\n    fetchDesserts(true);\n  }\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n  const handleAdd = () => {\n    if (inputName === '' || inputPrice === '' || inputImage === '' || inputDescription === '') {\n      alert(\"Please Enter all the values\")\n    } else {\n      addDessert({\n        name: inputName,\n        price: Number(inputPrice),\n        imageUrl: inputImage,\n        description: inputDescription\n      })\n    }\n    setShow(false);\n    setInputName('')\n    setInputPrice('')\n    setInputImage('')\n    setInputDescription('')\n  }\n\n  return (\n    <>\n      { loading && <Spinner animation=\"border\" role=\"status\">\n        <span className=\"visually-hidden\">Loading...</span>\n      </Spinner>\n      }\n      <div className=\"container container-custom\">\n        {dessert &&\n          <>\n            <img className=\"top_image\" src={dessert.imageUrl}></img>\n            <div className=\"bottom-left\">\n              <div className=\"price\">${dessert.price}</div>\n              <div className=\"name\">{dessert.name}</div>\n              <div className=\"read_more\"><ReadMore>{dessert.description}</ReadMore></div>\n            </div>\n          </>\n        }\n      </div>\n      <div className=\"container grid-container container-custom\">\n        <div className=\"row\">\n          {dessertList.map(function (item, i) {\n            return <Fragment key={i}>\n              <div className=\"col-12 col-md-6 col-lg-4\" key={i}>\n                <div className=\"card\">\n                  <img className=\"card-img-top\" src={item.imageUrl} alt=\"Card image cap\" />\n                  <div className=\"card-body\">\n                    <div className=\"info_container\">\n                      <h5 className=\"card-title price\">$ {item.price}</h5>\n                      <h5 className=\"card-title name\">{item.name}</h5>\n                    </div>\n                    <div className=\"card-text\"> <ReadMore>{item.description}</ReadMore></div>\n                  </div>\n                </div>\n              </div>\n            </Fragment>\n          })}\n        </div>\n      </div>\n      { desserts.length ==0 && <div className=\"container container-custom\">\n      <Button variant=\"primary\" onClick={getDesserts}>\n          Fetch Desserts\n        </Button>\n      </div> \n      }\n       { desserts.length > 0 && <div className=\"container container-custom\">\n        <Button variant=\"primary\" onClick={handleShow}>\n          Add Dessert\n        </Button>\n      </div> }\n      <Modal show={show} onHide={handleClose}>\n        <Modal.Header closeButton>\n          <Modal.Title>Add Desert</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Form>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n              <Form.Label>Desert Name</Form.Label>\n              <Form.Control value={inputName} onChange={e => setInputName(e.target.value)} type=\"text\" placeholder=\"Enter Dessert Name\" />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicPrice\">\n              <Form.Label>Price</Form.Label>\n              <Form.Control value={inputPrice} onChange={e => setInputPrice(e.target.value)} type=\"text\" placeholder=\"Price\" />\n            </Form.Group>\n            <Form.Group className=\"mb-3\" controlId=\"formBasicImage\">\n              <Form.Label>Image Url</Form.Label>\n              <Form.Control value={inputImage} onChange={e => setInputImage(e.target.value)} type=\"text\" placeholder=\"Enter ImageUrl\" />\n            </Form.Group>\n\n            <Form.Group className=\"mb-3\" controlId=\"formBasicDescription\">\n              <Form.Label>Description</Form.Label>\n              <Form.Control value={inputDescription} onChange={e => setInputDescription(e.target.value)} type=\"text\" placeholder=\"Enter Descriptiojn\" />\n            </Form.Group>\n          </Form>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button variant=\"primary\" onClick={handleAdd}>\n            Add Dessert\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nexport default DessertsList;\n","/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/index.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/hooks/use-actions.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/hooks/use-typed-selector.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/store.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/reducers/index.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/action-creators/index.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/middlewares/persist-middlware.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/reducers/desertsReducer.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/action-types/index.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/state/dessert.ts",[],"/Users/luckythakur/Desktop/React_Redux_TypeScript/src/components/read-more.tsx",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"65","severity":1,"message":"66","line":71,"column":13,"nodeType":"67","endLine":71,"endColumn":63},{"ruleId":"68","severity":1,"message":"69","line":86,"column":19,"nodeType":"67","endLine":86,"endColumn":92},{"ruleId":"70","severity":1,"message":"71","line":100,"column":25,"nodeType":"72","messageId":"73","endLine":100,"endColumn":27},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]